#!/bin/bash
#
# deploy.conf
#
# Global configuration file for deploy
#
#
# Clear screen on startup, when not running with --quiet switch
CLEARSCREEN="TRUE"

# Set the work path. This is the directory where all your 
# repos are stored, with no trailing slash
WORKPATH="/var/www/html"

# Path to repository configuration files relative to its 
# root directory, usually ./config
CONFIGDIR="config"

# The URL for your repository hosting, with no trailing slash. For example, 
# if you use Github and your repo URL looks like https://github.com/EMRL/deploy
# your REPOHOST should be set to https://github.com/EMRL (with no trailing slash)
# REPOHOST="https://bitbucket.org/teamname"

# Check to see all servers defined (repo host, staging, production, etc) are 
# returning a 200OK response
SERVERCHECK="TRUE"

# Path to wp-cli, with no trailing slash
WPCLI="/usr/local/bin"
 
# Activate "Smart Commits"; this feature tries to create automatic 
# commit messages by parsing the log files generated during 
# Wordpress updates. Set to "TRUE" to activate.
SMARTCOMMIT="TRUE"

# If you want to see statistics about your recent git 
# commits, set this value to exactly "TRUE"
GITSTATS="TRUE" 						

# Running deploy as the root user can be dangerous so it is not allowed by
# default. Set to TRUE is really must do this.
# ALLOWROOT="FALSE"

# Activate Permission Fix. With multi-user stuff going on, sometimes
# permission problems may arise. This function will reset permissions
# upon each deploy. Set FIXPERMISSIONS to "TRUE" to activate.
# FIXPERMISSIONS="FALSE"
# DEVUSER="developer"				# Lead developer username
# DEVGROUP="users"					# Lead developer group
# APACHEUSER="apache"				# Apache user
# APACHEGROUP="apache"				# Apache group

# Wordfence check - Wordfence makes some crappy files that break certain commands
# because of permissions garbage. Setting this to TRUE will enable a check that
# stops deployment if evidence of these files is detected.
# WFCHECK="FALSE"

# Clean and compress repo before starting up 
# GARBAGE="TRUE"

# If you have issues with the fatal permissions errors on .git/index, set this to TRUE
# FIXINDEX="TRUE" 

# If dirty (yet to be committed) files exist in the repo, deploy will normally not halt
# execution when running with the --automate flag. If you prefer to have the dirty files 
# stashed and proceed with updates set the below value to TRUE. Files will be unstashed
# after the deployment is complete.  
# STASH="TRUE"

# When ACTIVECHECK="TRUE", when running as deploy --force --update --quit 
# files will be scanned for changes made within the timeframe set in 
# ACTIVETiME (in minutes) and if any changes are found, deployment will be halted.
ACTIVECHECK="TRUE"
CHECKTIME="10"

# Define the path to your mail program, with no trailing slash. As of now, deploy 
# only works with sendmail.
MAILPATH="/usr/sbin"

# Set the address the logfiles will be sent to
# TO="deploy@domain.com"

# Set the address the logfiles will be sent from
# FROM="support@domain.com"

# Email log subject line "- project name" is appended to this, 
# creating a subject line such as "Project deployed - Project Name"
# SUBJECT="Deployment"		

# When should email logs be sent? Setting to TRUE to activate.
# EMAILERROR="TRUE"
# EMAILSUCCESS="TRUE"				
# EMAILQUIT="FALSE"

# Strips the bulk of nasty PHP debug messages out of the 
# log files that are emailed upon deployment.
# NOPHP="TRUE" 

# If you want your emails to be sent "clean" (with no detailed logging) set 
# SHORTEMAIL to TRUE. Full logs will still be posted to web logs. Error emails
# will continue to contain full logs.
# SHORTEMAIL="TRUE"

# Send HTML emails?
# EMAILHTML="TRUE"	

# If you're sending HTML emails, define which template you'd like 
# to use. HTML templates are stored in separate folders in 
# /etc/deploy/html. The value used below should be the folder name 
# of your template.
# HTMLTEMPLATE="default"
 
# Integration options.			
# 
# Set values for where you'd like to post commit messages to 
# via email. You can use something like Zapier to re-post that
# to whatever service you like, or if your project tracker allows
# for input directly via email like ours does, you post directly.
# Some of these options will definitely need to be set in the 
# project's .deployrc, not in a master configuration.

# Email from domain. Whatever you're integrating with may need
# a different From: address than that of the the machine you're 
# actually deploying from.
# FROMDOMAIN="domain.com"

# If you need to specify a user, other than your unix user name
# to be the in the From: email, do it here. Otherwise Leave blank.
# FROMUSER=""

# Post commit logs to this email address. This should probably 
# be set per-project. For examples, for our task management 
# system, this email would be task-####@projects.emrl.com, with 
# the #### being the task identification number for the project 
# being deployed.
# POSTEMAILHEAD="task-"
# POSTEMAILTAIL="@projects.domain.com"

# Slack Integration
# 
# You'll need to set up an "Incoming Webhook" custom integration on the Slack 
# side to get this ready to roll. 
# See https://YOURTEAMNAME.slack.com/apps/manage/custom-integrations to get 
# going. Once your Slack webhook is setup, run # 'deploy --slack-test' to 
# test your configuration.
#
# Set POSTTOSLACK to "TRUE" to enable Slack integration.
# POSTTOSLACK="TRUE"

# Add your full Webhook URL below, including https://
# SLACKURL="https://hooks.slack.com/services/#########/#########/######"

# Normally only successful deployments are posted to Slack.
# Enable the settings below to post on WARNiNG and/or ERROR.
# SLACKERROR="TRUE"

# Post HTML logs to remote server. This needs to be set to "TRUE" even you
# are only posting to LOCALHOST.
# REMOTELOG="TRUE"

# Define the root url where the deploy log will be accessible with no 
# trailing slash
# REMOTEURL="http://deploy.domain.com"

# If using HTML logs, define which template you'd like to use. HTML templates
# are stored in separate folders in /etc/deploy/html. The value used below 
# should be the folder name of your template.
# REMOTETEMPLATE="default"

# Post logs via SCP
# SCPPOST="TRUE"
# SCPUSER="user"
# SCPHOST="hostname.com"
# SCPHOSTPATH="/full/path/to/file"
#
# DANGER DANGER: If for some reason you absolutely can't use an SSH key you 
# can configure your password here
# SCPPASS="password"

# If you're posting logs to a place on the same machine you're deploying from,
# set POSTTOLOCALHOST to "TRUE" and define the path where you want to store 
# the HTML logs.
# LOCALHOSTPOST="TRUE"
# LOCALHOSTPATH="/var/www/production/deploy"

# Set the number of days before logs should be deleted. Currently this only 
# works for logs stored on localhost. 
# EXPIRELOGS="30"

# Webhook POST URL
# POSTURL=""
